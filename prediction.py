# -*- coding: utf-8 -*-
"""Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15IrIHROFIZ0nVrfTBzkBlBKnHY7XxJRz
"""

import pandas as pd
import joblib

data_to_predict = {
    'Age': 25,
    'BusinessTravel': 'Travel_Frequently',
    'DailyRate': 1342,
    'Department': 'Human Resources',
    'DistanceFromHome': 1,
    'Education': 3,
    'EducationField': 'Other',
    'EnvironmentSatisfaction': 3,
    'Gender': 1,
    'HourlyRate': 78,
    'JobInvolvement': 3,
    'JobLevel': 1,
    'JobRole': 'Human Resources',
    'JobSatisfaction': 2,
    'MaritalStatus': 'Married',
    'MonthlyIncome': 2983,
    'MonthlyRate': 6234,
    'NumCompaniesWorked': 0,
    'OverTime': 1,
    'PercentSalaryHike': 10,
    'PerformanceRating': 3,
    'RelationshipSatisfaction': 3,
    'StockOptionLevel': 1,
    'TotalWorkingYears': 7,
    'TrainingTimesLastYear': 2,
    'WorkLifeBalance': 3,
    'YearsAtCompany': 4,
    'YearsInCurrentRole': 2,
    'YearsSinceLastPromotion': 3,
    'YearsWithCurrManager': 1,
}

def predict_attrition(employee_data, model_path='logistic_regression_model.pkl', scaler_path='scaler.pkl'):

    #Load model dan scaler
    model = joblib.load(model_path)
    scaler = joblib.load(scaler_path)

    #Convert ke DataFrame
    df = pd.DataFrame(employee_data, index=[0])

    #Encoding
    encoding_maps = {
        'BusinessTravel': {'Non-Travel': 0, 'Travel_Rarely': 1, 'Travel_Frequently': 2},
        'Department': {'Human Resources': 0, 'Research & Development': 1, 'Sales': 2},
        'EducationField': {'Human Resources': 0, 'Life Sciences': 1, 'Marketing': 2, 'Medical': 3, 'Other': 4, 'Technical Degree': 5},
        'JobRole': {'Healthcare Representative': 0, 'Human Resources': 1, 'Laboratory Technician': 2, 'Manager': 3, 'Manufacturing Director': 4, 'Research Director': 5, 'Research Scientist': 6, 'Sales Executive': 7, 'Sales Representative': 8},
        'MaritalStatus': {'Divorced': 0, 'Married': 1, 'Single': 2}
    }

    for col, mapping in encoding_maps.items():
        if col in df.columns:
            if df[col].iloc[0] in mapping:
                df[col] = mapping[df[col].iloc[0]]
            else:
                df[col] = 0

    #Normalisasi
    df_scaled = scaler.transform(df)

    #Prediksi
    prediction = model.predict(df_scaled)[0]
    probabilities = model.predict_proba(df_scaled)[0]

    return {
        'prediction': int(prediction),
        'probability_no_attrition': float(probabilities[0]),
        'probability_attrition': float(probabilities[1]),
        'confidence': float(max(probabilities)),
        'risk_level': 'HIGH' if probabilities[1] > 0.7 else 'MEDIUM' if probabilities[1] > 0.4 else 'LOW'
    }

#Test fungsi
print("Testing fungsi prediksi:")
result = predict_attrition(data_to_predict)
print(f"Hasil: {result}")